// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// multiple generators are possible
// field type modifiers: ? - optional, [] - array
// attributes: @id, @default, @unique, @relation, @updatedAt, @default(now()), @default(uuid())
// block level attributes: @map(name: "name_in_db")

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // field type modifiers,attributes
  // id Int @id @default(autoincrement())
  id String @id @default(uuid())
  age Int
  name String 
  email String
  // isAdmin Boolean
  role Role @default(BASIC)
  // largeNumber BigInt
  // preferences Json
  // blob Bytes -> file
  // blob Unsupported("")
  writtenPosts Post[] @relation("WrittenPosts") // one to many
  favoritePosts Post[] @relation("FavoritePosts") 
  userPreference UserPreference?

  @@unique([age, name])
  @@index([email])
}

model Post {
  // rating Decimal - wider range
  id String @id @default(uuid())
  title String
  averageRating Float 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId String 
  favoritedBy User? @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categories Category[] // many to many

  // composite id
  // @@id([authorId, title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  posts Post[]
}

model UserPreference {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

enum Role {
  BASIC
  USER
  ADMIN
}